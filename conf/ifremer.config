/*
 * -------------------------------------------------
 *  Nextflow config file for processes options
 * -------------------------------------------------
 * Defines resources for workflow processes
 */

//
//
// DO NOT PUSH THIS FILE. 
// IT MUST REMAIN PRIVATE FOR COMPUTER SECURITY ISSUES
//
//

// Profile config names for samba
params {
  config_profile_description = 'The Ifremer Datarmor cluster profile'
  config_profile_contact = 'sebimer@ifremer.fr'
  config_profile_url = 'https://ifremer-bioinformatics.github.io/'
  max_memory = 500.GB
  max_cpus = 56
  max_time = 96.h
}

// Define the executor = cluster scheduler
executor {
    //check in nextflow documentation the scheduler name to match your cluster scheduler system
    name = 'pbspro'
    // according to your scheduler, adjust the exit time out (need to be high for pbspro)
    exitReadTimeout = '1440min'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

// Define env variable that will be accessible in nextflow tasks
env {
    WDir = "${SCRATCH}"
}

process {
    //default queue
    queue = { task.cpus > 1 ? 'omp' : task.label && task.label.contains('internet_access') ? 'ftp' : 'sequentiel' }

    //clusterOptions can be used to add some native specifications not available in the standard parameters
    clusterOptions = '-m n -S /bin/bash'
}